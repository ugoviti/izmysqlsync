#!/bin/bash
# izsyncmysql: mysql database direct replicate/export/import script
# written by Ugo Viti <ugo.viti@initzero.it>
# version: 20201008

## Examples:

#**mysql replica via tcp 3306 singolo DB (mantain source DB name):**
#  src_host='wms-database.prod.svc.cluster.local' src_port=3306 src_username='root' src_password='PASSWORD' dst_host='wms-database.test.svc.cluster.local' dst_port=3306 dst_username='root' dst_password='PASSWORD' izsyncmysql DATABASE_SORGENTE

#**mysql replica via tcp 3306 single DB (renaming the destination DB):**
#  src_host='wms-database.test.svc.cluster.local' src_username='root' src_password='PASSWORD' dst_host='wms-database.test.svc.cluster.local' dst_username='root' dst_password='PASSWORD' izsyncmysql DATABASE_SORGENTE DATABASE_DESTINAZIONE

#**mysql replica Tunnel SSH single DB (mantain source DB name):**
#  ssh=1 ssh_src_host="www.cloudwms.it" ssh_src_port="32" src_host='127.0.0.1' src_username='root' src_password='PASSWORD' dst_host='127.0.0.1' dst_username='root' dst_password='PASSWORD' izsyncmysql DATABASE_SORGENTE

#**mysql replica via Tunnel SSH of all DB and some excluded:**
#  ssh=1 ssh_src_host="www.cloudwms.it" ssh_src_port="32" src_host='127.0.0.1' src_username='root' src_password='PASSWORD' src_db_exclude='-e information_schema -e performance_schema -e sys -e mysql' dst_host='127.0.0.1' dst_username='root' dst_password='PASSWORD' izsyncmysql


src_db="$1"
shift
dst_db="$1"
 
export_views=1
 
#set -x
 
: ${ssh:=0}
 
: ${ssh_src_host:=""}
: ${ssh_src_port:="22"}
: ${ssh_src_username:="root"}
 
: ${src_host:=""}
: ${src_username:="root"}
: ${src_password:=""}
: ${src_port:="3306"}
 
: ${src_db_exclude:="-e information_schema -e performance_schema -e sys -e mysql"}
 
: ${dst_host:=""}
: ${dst_username:="root"}
: ${dst_password:=""}
: ${dst_port:="3306"}
 
[[ -z "$ssh_src_host" ]] && ssh=0
[[ -z "$src_host" || -z "$src_username" ]] && echo "ERROR: no source host or username specified. exiting..." && exit 1
[[ -z "$dst_host" || -z "$dst_username" ]] && echo "ERROR: no destination host or username specified. exiting..." && exit 1
 
# default mysqldump options
mysqldump_opts="-C --force --opt --quote-names --default-character-set=utf8 --events --routines --triggers --hex-blob --single-transaction --quick --lock-tables=false"
#mysqldump_opts+=" --hex-blob --skip-triggers --set-gtid-purged=OFF --default-character-set=utf8"
 
# add drop database if no src_db or dst_db is given
if [[ -z "$dst_db" ]]; then
    dst_db_drop=0
    mysqldump_opts+=" -B --add-drop-database"
  else
    dst_db_drop=1
fi
 
# show all database size
# SELECT table_schema AS "Database name", SUM(data_length + index_length) / 1024 / 1024 AS "Size (MB)" FROM information_schema.TABLES GROUP BY table_schema;
 
ssh_run() {
        ssh -o BatchMode=yes -o StrictHostKeyChecking=no -C -n $ssh_src_username@$ssh_src_host -p $ssh_src_port "$@"
}
 
mysql_query_src() {
        local dbname=$1
        shift
        local host=$src_host
        local port=$src_port
        local username=$src_username
        local password=$src_password
	mysql_query $dbname $@
}
 
mysql_query_dst() {
        local dbname=$1
        shift
        local host=$dst_host
        local port=$dst_port
        local username=$dst_username
        local password=$dst_password
	mysql_query $dbname $@
}
 
mysql_query() {
        local dbname=$1
        shift
        local query="mysql -h $host --port=$port -u $username $([ -n $password ] && echo "--password=$password" || echo "-p" ) --batch --skip-column-names --raw '$dbname' --execute='$@' 2>&1 | grep -v 'Using a password on the command line interface can be insecure'"
        #local query="mysql -h $src_host --port=$src_port -u $src_username $([ -n $src_password ] && echo "--password=$src_password" || echo "-p" ) --batch --skip-column-names --raw '$dbname' --execute='$@' 2>&1 | grep -v 'Using a password on the command line interface can be insecure'"
        [ $ssh = 1 ] && ssh_run "$query" || eval $query
}
 
izsyncmysql() {
  if [ -z "$src_db" ]; then
    src_dblist="$(mysql_query_src mysql "SHOW DATABASES;" | grep -wv ${src_db_exclude} | tr -s "\n" " ")"
    [ $? != 0 ] && echo "ssh unable to connect" && exit 1
  else
    src_dblist="$src_db"
  fi
 
  n=1
  src_db_tot=$(echo "$src_dblist" | awk '{print NF}')
 
  [[ ! -z "$src_db" && -z "$dst_db" ]] && dst_db="$src_db"
 
  ssh_src_uri="ssh://$ssh_src_username@$ssh_src_host:$ssh_src_port"
  src_uri="mysql://$src_username@$src_host:$src_port/$src_db"
  dst_uri="mysql://$dst_username@$dst_host:$dst_port/$dst_db"
 
  echo "$(log) ----------------------------------------------"
  [ $ssh = 1 ] && echo "    Tunnel SSH: ssh://$ssh_src_username@$ssh_src_host:$ssh_src_port"
  echo "               Source URI: $src_uri"
  echo "          Destination URI: $dst_uri"
  echo
  echo "          Database totali: $src_db_tot"
  echo "Database da sincronizzare: $src_dblist"
  echo
  [ $src_uri = $dst_uri ] && echo -e "ERROR: you are cloning a DB into itself... exiting now to avoid data loss" && exit 1
  echo -e -n "Premere invio per continuare (CTRL-C per cancellare)"; read -n 1
  echo
  echo "$(log) ----------------------------------------------"
 
  for src_db in $src_dblist ; do
   [ $n -ne 1 ] && echo
   dbsize="$(mysql_query_src $src_db "SELECT table_schema \"Database Name\", ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) \"Database Size (MB)\" FROM information_schema.TABLES where table_schema = \"$src_db\";" | awk '{print $2}')"
   echo "$(log) [$n/$src_db_tot] START processing DB: $src_db Size: $dbsize (MB)"
   echo "$(log) => importing from source DB: ($src_uri)$([ $ssh = 1 ] && echo " (via $ssh_src_uri)") to destination DB: ($dst_uri)"
   [ $export_views = 0 ] && mysql_viewlist="$(mysql_query_src $src_db "SHOW FULL TABLES IN $src_db WHERE TABLE_TYPE LIKE \"VIEW\";" | awk '{print $1}' | tr -s "\n" " ")"
 
   #set -x
 
   # drop and recreate empty destination db if specified
   if [ "$dst_db_drop" = "1" ]; then
     # if destination db exist, drop it before creating
     if [ ! -z "$(mysql_query_dst mysql "SHOW DATABASES LIKE \"$dst_db\";")" ]; then
       echo "$(log) => dropping destination DB: ($dst_uri)"
       mysqladmin -h "$dst_host" -u "$dst_username" --password="$dst_password" drop "$dst_db" -f 2>&1 | grep -v "Warning: Using a password" | grep -v '^Database.* dropped$'
     fi
     echo "$(log) => creating empty DB: ($dst_uri)"
     mysqladmin -h "$dst_host" -u "$dst_username" --password="$dst_password" create "$dst_db" 2>&1 | grep -v "Warning: Using a password"
   fi
 
   # export / import db single pass
   local query_dump="mysqldump $mysqldump_opts -h $src_host --port=$src_port -u $src_username $([ -n "$src_password" ] && echo "--password=$src_password" || echo "-p" ) $src_db $([ $export_views = 0 ] && for view in $mysql_viewlist; do echo -n '--ignore-table=$src_db.$view '; done)"
# 2>&1 \
#          | grep -v 'Using a password on the command line interface can be insecure'"
 
   local query_import="mysql -h $dst_host -u $dst_username --password=$dst_password --port=$dst_port -f $dst_db"
 
   if [ $ssh = 1 ];then
     ssh_run "$query_dump" | $query_import 2>&1 | grep -v 'Using a password on the command line interface can be insecure'
    else
     #sync_cmd="$query_dump | $query_import"
     sync_cmd="$query_dump | sed -E -e 's/DEFINER=\`([^\`]+?)\`@\`([^\`]+?)\`/DEFINER=CURRENT_USER/g' -e 's/,NO_AUTO_CREATE_USER//g' | $query_import"
     echo "$(log) => running query: $sync_cmd"
     eval $sync_cmd
   fi
 
   echo "$(log) [$n/$src_db_tot] END processing DB: $src_db"
   let n+=1
  done
  echo "$(log) ----------------------------------------------"
}
 
log() {
        echo "$(date +"[%Y/%m/%d %H:%M:%S]")$1 "
}
 
izsyncmysql
