#!/bin/bash
# izmysqlsync
# written by Ugo Viti <ugo.viti@initzero.it>
NAME="izMySQLSync"
DESCRIPTION="MySQL database live replication/export/import script"
VERSION="2.0.2"
VERSION_DATE="20220711"

# default vars
export_views=1

# by default ssh tunnel is disabled
ssh_src_tunnel=0
ssh_dst_tunnel=0

now="$(date +"%Y%m%d-%H%M%S")"

izmysqlsync_src_cfg="/tmp/izmysqlsync_src-$now.cfg"
izmysqlsync_dst_cfg="/tmp/izmysqlsync_dst-$now.cfg"

#set -x

# default mysqldump options
mysqldump_opts="-C --force --opt --quote-names --default-character-set=utf8 --events --routines --triggers --hex-blob --single-transaction --quick --lock-tables=false"

# if running mariadb doesn't use the following options
[ -z "$(mysqldump --version | grep -i mariadb)" ] && mysqldump_opts+=" --column-statistics=0"

#mysqldump_opts+=" --hex-blob --skip-triggers --set-gtid-purged=OFF --default-character-set=utf8"

# default mandatory commands
COMMANDS="ssh sshpass mysqldump mysql"

# verify if all commands are installed in the system paths
for COMMAND in $COMMANDS; do
  which $COMMAND >/dev/null 2>&1
  [ $? -ne 0 ] && echo "ERROR: the command '$COMMAND' doesn't exist in any path, please install it and retry" && exit 1
done

# add drop database if no src_db or dst_db is given
#if [[ -z "$dst_db" ]]; then
#    dst_db_drop=0
#    mysqldump_opts+=" -B --add-drop-database"
#  else
#    dst_db_drop=1
#fi
 
# show all database size
# SELECT table_schema AS "Database name", SUM(data_length + index_length) / 1024 / 1024 AS "Size (MB)" FROM information_schema.TABLES GROUP BY table_schema;

# manage source ssh server commands
ssh_src_run() {
        #set -x
        [ "$ssh_src_password" ] && cmd=" sshpass -p${ssh_src_password}"
        $cmd ssh -o StrictHostKeyChecking=no -C -n $ssh_src_username@$ssh_src_host -p $ssh_src_port "$@"
}


ssh_src_cfg_make() {
        #set -x
        ssh_src_run "echo \"$(print_mysql_client_cfg_src)\" > ${izmysqlsync_src_cfg}"
}

ssh_src_cfg_rm() {
        #set -x
        ssh_src_run "rm -f ${izmysqlsync_src_cfg}"
}


# manage destination ssh server commands
ssh_dst_run() {
        #set -x
        [ "$ssh_dst_password" ] && cmd=" sshpass -p${ssh_dst_password}"
        $cmd ssh -o StrictHostKeyChecking=no -C -n $ssh_dst_username@$ssh_dst_host -p $ssh_dst_port "$@"
}


ssh_dst_cfg_make() {
        #set -x
        ssh_dst_run "echo \"$(print_mysql_client_cfg_dst)\" > ${izmysqlsync_dst_cfg}"
}

ssh_dst_cfg_rm() {
        #set -x
        ssh_dst_run "rm -f ${izmysqlsync_dst_cfg}"
}


mysql_query_src() {
        local dbname=$1
        shift
        local query="mysql --defaults-extra-file=$izmysqlsync_src_cfg --batch --skip-column-names --raw '$dbname' --execute='$@' 2>&1"
        [ $ssh_src_tunnel = 1 ] && ssh_src_cfg_make && ssh_src_run "$query" || eval $query
}
 
mysql_query_dst() {
        local dbname=$1
        shift
        local query="mysql --defaults-extra-file=$izmysqlsync_dst_cfg --batch --skip-column-names --raw '$dbname' --execute='$@' 2>&1"
        [ $ssh_dst_tunnel = 1 ] && ssh_dst_cfg_make && ssh_dst_run "$query" || eval $query
}
 

print_mysql_client_cfg_src() {
  # save mysql src logins
  echo "[client]
host=$src_host
port=$src_port
user=$src_username
$([ ! -z $src_password ] && echo password=$src_password)"
}

print_mysql_client_cfg_dst() {
  echo "[client]
host=$dst_host
port=$dst_port
user=$dst_username
$([ ! -z $dst_password ] && echo password=$dst_password)"
}


main() {
  if [ -z "$src_db" ]; then
    src_dblist="$(mysql_query_src mysql "SHOW DATABASES;" | grep -wv ${src_db_exclude} | tr -s "\n" " ")"
    [ $? != 0 ] && echo "ssh unable to connect" && exit 1
  else
    src_dblist="$src_db"
  fi
 
  n=1
  src_db_tot=$(echo "$src_dblist" | awk '{print NF}')
 
  # set destination db if not defined
  [[ ! -z "$src_db" && -z "$dst_db" ]] && dst_db="$src_db"
  
  # unset destination db if syncronizing more than 1 source db
  [ $src_db_tot -gt 1 ] && unset dst_db
 
  ssh_src_uri="ssh://$ssh_src_username@$ssh_src_host:$ssh_src_port"
  ssh_dst_uri="ssh://$ssh_dst_username@$ssh_dst_host:$ssh_dst_port"
  src_uri="mysql://$src_username@$src_host:$src_port/$src_db"
  dst_uri="mysql://$dst_username@$dst_host:$dst_port/$dst_db"
 
  echo "$(log) ----------------------------------------------"
  echo -n "           SOURCE:[$src_uri]"
  [ $ssh_src_tunnel = 1 ] && echo " VIA:[$ssh_src_uri]" || echo
  echo -n "      DESTINATION:[$dst_uri]"
  [ $ssh_dst_tunnel = 1 ] && echo " VIA:[$ssh_dst_uri]" || echo
  echo
  echo
  [[ $src_db_tot -gt 1 && ! -z "$src_db_exclude_list" ]] && echo "Database excluded: $(echo $src_db_exclude_list | sed 's/,/ /g')"
  [ $src_db_tot -gt 1 ]           && echo "    Database list: $src_dblist"
  [ $src_db_tot -gt 1 ]           && echo "           DB Tot: $src_db_tot DB"
  [ $src_uri = $dst_uri ]         && echo "ERROR: you are cloning a DB into itself... exiting now to avoid data loss" && exit 1
  echo "$(log) ----------------------------------------------"
  echo -e -n "Press ENTER to continue (CTRL-C to abort)"; read -n 1 ; echo
  echo "$(log) ----------------------------------------------"

  # make local mysql config
  echo "$(log) => saving src credential access into: $izmysqlsync_src_cfg"
  print_mysql_client_cfg_src > "$izmysqlsync_src_cfg"
  echo "$(log) => saving dst credential access into: $izmysqlsync_dst_cfg"
  print_mysql_client_cfg_dst > "$izmysqlsync_dst_cfg"
 
  # make the remote source mysql config
  if [ $ssh_src_tunnel = 1 ]; then
    echo "$(log) => saving src credential access into remote ssh server: ${ssh_src_uri}${izmysqlsync_src_cfg}"
    ssh_src_cfg_make
  fi
  if [ $ssh_dst_tunnel = 1 ]; then
    echo "$(log) => saving dst credential access into remote ssh server: ${ssh_dst_uri}${izmysqlsync_dst_cfg}"
    ssh_dst_cfg_make
  fi
  echo
 
  for src_db in $src_dblist ; do
   [ $n -ne 1 ] && echo
   # if dst_db is not defined use the src_db name
   [ -z "$dst_db" ] && dst_db=$src_db
   local dbsize="$(mysql_query_src $src_db "SELECT table_schema \"Database Name\", ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) \"Database Size (MB)\" FROM information_schema.TABLES where table_schema = \"$src_db\";" | awk '{print $2}')"
   echo "$(log) [$n/$src_db_tot] START processing DB:[$src_db] size:[$dbsize MB]"

   #set -x
 
   # drop and recreate empty destination db if specified
   # if destination db exist, drop it before creating
   if [ ! -z "$(mysql_query_dst mysql "SHOW DATABASES LIKE \"$dst_db\";")" ]; then
     echo "$(log) --> dropping destination DB:[${dst_uri}]"
     mysql_query_dst mysql "DROP DATABASE $dst_db;"
   fi
   echo "$(log) --> creating empty destination DB:[${dst_uri}]"
   mysql_query_dst mysql "CREATE DATABASE $dst_db;"

   echo "$(log) --> importing FROM:[${src_uri}] TO:[${dst_uri}]"
   [ $export_views = 0 ] && mysql_viewlist="$(mysql_query_src $src_db "SHOW FULL TABLES IN $src_db WHERE TABLE_TYPE LIKE \"VIEW\";" | awk '{print $1}' | tr -s "\n" " ")"
 
   # export / import db single step
   [ $export_views = 0 ] && local mysqldump_opts_extra=" $(for view in $mysql_viewlist; do echo -n ' --ignore-table=$src_db.$view'; done)"
   local query_dump="mysqldump --defaults-extra-file=$izmysqlsync_src_cfg $mysqldump_opts $mysqldump_opts_extra $src_db"
   local query_import="mysql --defaults-extra-file=$izmysqlsync_dst_cfg -f $dst_db"
 
   unset sync_cmd
   [[ $ssh_src_tunnel = 1 && ! -z  "$ssh_src_password" ]] && sync_cmd+=" sshpass -p${ssh_src_password}"
   [[ $ssh_src_tunnel = 1 ]] && sync_cmd+=" ssh -o StrictHostKeyChecking=no -C -n $ssh_src_username@$ssh_src_host -p $ssh_src_port"
   sync_cmd+=" $query_dump"
   sync_cmd+=" | sed -E -e 's/DEFINER=\`([^\`]+?)\`@\`([^\`]+?)\`/DEFINER=CURRENT_USER/g' -e 's/,NO_AUTO_CREATE_USER//g'"
   sync_cmd+=" |"
   [[ $ssh_dst_tunnel = 1 && ! -z  "$ssh_dst_password" ]] && sync_cmd+=" sshpass -p${ssh_dst_password}"
   [[ $ssh_dst_tunnel = 1 ]] && sync_cmd+=" ssh -o StrictHostKeyChecking=no -C $ssh_dst_username@$ssh_dst_host -p $ssh_dst_port \"cat - |\""
   sync_cmd+=" $query_import"
   
   echo "$(log) --> running command: $sync_cmd"

   eval $sync_cmd
 
   echo "$(log) [$n/$src_db_tot] END processing DB:[$src_db]"
   let n+=1
   # unset variables
   unset src_db dst_db sync_cmd mysqldump_opts_extra
   # wait 1 sec before proceding
   sleep 1
  done
  echo "$(log) ----------------------------------------------"
}
 
log() {
        echo "$(date +"[%Y/%m/%d %H:%M:%S]")$1 "
}

#
# URI parsing function
#
# The function creates global variables with the parsed results.
# It returns 0 if parsing was successful or non-zero otherwise.
#
# [schema://][user[:password]@]host[:port][/path][?[arg1=val1]...][#fragment]
#
# thanks to: https://wp.vpalos.com/537/uri-parsing-using-bash-built-in-features/
function uri_parser() {
    # uri capture
    uri="$@"

    # safe escaping
    uri="${uri//\`/%60}"
    uri="${uri//\"/%22}"

    # top level parsing
    pattern='^(([a-z]{3,5}):\/\/)?((([^:\/]+)(:([^@\/]*))?@)?([^:\/?]+)(:([0-9]+))?)(\/[^?]*)?(\?[^#]*)?(#.*)?$'
    [[ "$uri" =~ $pattern ]] || return 1;

    # component extraction
    uri=${BASH_REMATCH[0]}
    uri_schema=${BASH_REMATCH[2]}
    uri_address=${BASH_REMATCH[3]}
    uri_username=${BASH_REMATCH[5]}
    uri_password=${BASH_REMATCH[7]}
    uri_host=${BASH_REMATCH[8]}
    uri_port=${BASH_REMATCH[10]}
    uri_path=${BASH_REMATCH[11]}
    uri_query=${BASH_REMATCH[12]}
    uri_fragment=${BASH_REMATCH[13]}

    # path parsing
    count=0
    path="$uri_path"
    pattern='^/+([^/]+)'
    while [[ $path =~ $pattern ]]; do
        eval "uri_parts[$count]=\"${BASH_REMATCH[1]}\""
        path="${path:${#BASH_REMATCH[0]}}"
        let count++
    done

    # query parsing
    count=0
    query="$uri_query"
    pattern='^[?&]+([^= ]+)(=([^&]*))?'
    while [[ $query =~ $pattern ]]; do
        eval "uri_args[$count]=\"${BASH_REMATCH[1]}\""
        eval "uri_arg_${BASH_REMATCH[1]}=\"${BASH_REMATCH[3]}\""
        query="${query:${#BASH_REMATCH[0]}}"
        let count++
    done

    # return success
    return 0
}

function uri_unset() {
  unset uri uri_schema uri_address uri_username uri_password uri_host uri_port uri_path uri_query uri_fragment count query pattern
}

###################################################################
#################### default program menu and arguments validations

# command prompt menu
usage(){
  local progname=$0
  echo "$NAME - $DESCRIPTION
written by Ugo Viti <ugo.viti@initzero.it>
version: $VERSION released: $VERSION_DATE

usage: $progname [options]

Option:  Argument:  Description:
--------------------------------------------------------------------------------
  -s     <uri>      The URI of the SOURCE MySQL server
  -d     <uri>      The URI of the DESTINATION MySQL server
  -e     <db>       Comma separated list of DB to exclude when syncronizing all DB
  -S     <uri>      The URI of the SOURCE SSH server used as reverse tunnel for mysqldump
  -D     <uri>      The URI of the DESTINATION SSH server used as reverse tunnel for mysql import

Misc options:
  -h                Display this help menu

Examples:
  Single DB replication changing the name:
  $ $0 -s mysql://USERNAME:PASSWORD@SOURCE_DB:3306/reacto_initzero -d mysql://USERNAME:PASSWORD@DESTINATION_DB:3306/reacto_test

  All DB replication:
  $ $0 -s mysql://USERNAME:PASSWORD@SOURCE_DB:3306 -d mysql://USERNAME:PASSWORD@DESTINATION_DB:3306

  All DB replication with some DB excluded:
  $ $0 -s mysql://USERNAME:PASSWORD@SOURCE_DB:3306 -d mysql://USERNAME:PASSWORD@DESTINATION_DB:3306 -e information_schema,performance_schema,sys,mysql,test,reacto_test
  
  Single DB replication via SOURCE SSH tunnel:
  $ $0 -S ssh://USERNAME:PASSWORD@REMOTE_SOURCE_SERVER:22 -s mysql://USERNAME:PASSWORD@SOURCE_DB:3306/reacto_initzero -d mysql://USERNAME:PASSWORD@DESTINATION_DB:3306/reacto_test
  
  Single DB replication via SOURCE and DESTINATION SSH tunnel:
  $ $0 -S ssh://USERNAME:PASSWORD@REMOTE_SOURCE_SERVER:22 -s mysql://USERNAME:PASSWORD@SOURCE_DB:3306/reacto_initzero -D ssh://USERNAME:PASSWORD@REMOTE_DESTINATION_SERVER:222 -d mysql://USERNAME:PASSWORD@DESTINATION_DB:3306/reacto_test
"
}

NO_ARGS=0
E_OPTERROR=65

if [ $# -eq "$NO_ARGS" ]  # Script invoked with no command-line args?
 then
  usage
  exit $E_OPTERROR        # Exit and explain usage, if no argument(s) given.
fi

# Usage: scriptname -options
# Note: dash (-) necessary

while getopts "s:S:d:D:e:h" option ; do
  case $option in
    s) # source mysql server uri
        src_uri="${OPTARG}"
        ;;
    S) # source ssh server used as reverse tunnel interface
        ssh_src_uri="${OPTARG}"
        ssh_src_tunnel=1
        ;;
    d) # destination mysql server uri
        dst_uri="${OPTARG}"
        ;;
    D) # destination ssh server used as reverse tunnel interface
        ssh_dst_uri="${OPTARG}"
        ssh_dst_tunnel=1
        ;;
    e) # exclude these db
        src_db_exclude_list="${OPTARG}"
        ;;
    h) # display this help menu
        usage
        exit 0
        ;;
    *)
        usage
        echo "invalid switch specified - abort." >&2
        exit 1
        ;;
  esac
done
# Move argument pointer to next.
shift $(($OPTIND - 1))

[ -z "$src_uri" ] && echo "ERROR: no source URI Server specified. exiting..." && exit 1
[ -z "$dst_uri" ] && echo "ERROR: no destination URI Server specified. exiting..." && exit 1

if [ ! -z "$ssh_src_uri" ]; then
  uri_parser $ssh_src_uri
  ssh_src_host="$uri_host"
  ssh_src_port="$uri_port"
  ssh_src_username="$uri_username"
  ssh_src_password="$uri_password"
  
  # ssh tunnel vars
  : ${ssh_src_host:=""}
  : ${ssh_src_port:="22"}
  : ${ssh_src_username:="$USER"}
  uri_unset
fi

if [ ! -z "$src_uri" ]; then
  # import src uri parts
  uri_parser $src_uri
  src_host="$uri_host"
  src_port="$uri_port"
  src_username="$uri_username"
  src_password="$uri_password"
  src_db="$(echo "$uri_path" | sed 's|^/||')"

  # src default vars
  : ${src_host:=""}
  : ${src_username:="$USER"}
  : ${src_password:=""}
  : ${src_port:="3306"}
  
  [ ! -z "$src_db" ] && : ${src_db_exclude_list:="information_schema,performance_schema,sys,mysql"} || : ${src_db_exclude_list:=""}
  
  if [ ! -z "$src_db_exclude_list" ]; then
    unset src_db_exclude
    for db in $(echo "$src_db_exclude_list" | sed 's/,/ /g') ; do
      src_db_exclude+=" -e $db"
    done
  fi
  uri_unset
fi

if [ ! -z "$ssh_dst_uri" ]; then
  uri_parser $ssh_dst_uri
  ssh_dst_host="$uri_host"
  ssh_dst_port="$uri_port"
  ssh_dst_username="$uri_username"
  ssh_dst_password="$uri_password"
  
  # ssh tunnel vars
  : ${ssh_dst_host:=""}
  : ${ssh_dst_port:="22"}
  : ${ssh_dst_username:="$USER"}
  uri_unset
fi

if [ ! -z "$dst_uri" ]; then
  uri_parser $dst_uri
  dst_host="$uri_host"
  dst_port="$uri_port"
  dst_username="$uri_username"
  dst_password="$uri_password"
  dst_db="$(echo "$uri_path" | sed 's|^/||')"

  # dst default vars
  : ${dst_uri:=""}
  : ${dst_host:=""}
  : ${dst_username:="$USER"}
  : ${dst_password:=""}
  : ${dst_port:="3306"}
  uri_unset
fi

# sanity checks
[[ -z "$src_host" || -z "$src_username" ]] && echo "ERROR: no source host or username specified. exiting..." && exit 1
[[ -z "$dst_host" || -z "$dst_username" ]] && echo "ERROR: no destination host or username specified. exiting..." && exit 1
 
# here begin all
main
 
# if we no error occur, then cleanup all temporary files and directories
if   [[ $ssh_src_tunnel = 1 && $ssh_dst_tunnel = 0 ]]; then
    trap "rm -f ${izmysqlsync_src_cfg} ${izmysqlsync_dst_cfg} && ssh_src_cfg_rm && exit 0 || exit 1" 0
elif [[ $ssh_src_tunnel = 1 && $ssh_dst_tunnel = 1 ]]; then
    trap "rm -f ${izmysqlsync_src_cfg} ${izmysqlsync_dst_cfg} && ssh_src_cfg_rm && ssh_dst_cfg_rm && exit 0 || exit 1" 0
elif [[ $ssh_src_tunnel = 0 && $ssh_dst_tunnel = 0 ]]; then
    trap "rm -f ${izmysqlsync_src_cfg} ${izmysqlsync_dst_cfg} && exit 0 || exit 1" 0
fi
